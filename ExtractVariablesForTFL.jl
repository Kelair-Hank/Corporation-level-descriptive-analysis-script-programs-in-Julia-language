using DataFrames, XLSX, Statistics, StatsBase, Pipe

# The following function only work on a df data frame directly generated by GroupedContinuousStats.jl, not work on a df read from current Working directory.
# It extracts and rearranges statistical results of a continuous variable from the input data frame.
function ConVarExtract2(df::DataFrame,var::Symbol)
    df=filter(row->!(row.x1 in String["mean","std","q25","median","q75","max","min","nmissing"]),df)
    row1=@pipe filter(row->row.x1=="variable",df) |> Matrix{Union{String,Symbol}} |> _[1,:]
    parameters=df[:,1:1]
    var1=df[:,row1 .== var]
    var1=@pipe [parameters var1] |> insertcols!(_,1,:Variables=>var,makeunique=true) |> rename!(_,[:Variables;:categories;Symbol.(Vector{Union{Missing,String}}(_[1,3:end]))])
    filter!(row->row.categories in String["n","Mean (SD)","Median (Min; Max)","25th and 75th Percentile","Number (%) of missing values"],var1)
    var1.Variables=string.(var1.Variables);var1.Variables[2:end] .= Ref("")
    return var1
end

# The following function divide an input data frame into several smaller data frames via an input categorical column name.
# The generated data frames are elements of a vector.
function DataFrameGroup(dfx::DataFrame,GroupVar::Symbol)
    gdfx=groupby(dfx,GroupVar)
    dg1=DataFrame[DataFrame(i) for i=gdfx]
end

# The following function rearrange input data frame rows by value sequence of the given column.
function RearrangeRows(dfn::DataFrame,col::Symbol)
    misses=filter(row->row[col]=="Number (%) of missing values",dfn)
    totals=filter(row->row[col]=="Total",dfn)
    cates=filter(row->!(row[col] in String["Number (%) of missing values","Total"]),dfn)
    return [cates;misses;totals]
end

# The following function only work on a df data frame directly generated by GroupedCategoricalStats.jl, not work on a df read from current Working directory.
# It extracts and rearranges statistical results of a categorical variable from the input data frame.
function CateVarExtract2(df::DataFrame,var::String,grouping_var::Symbol)
    var1=select(df,Not(Symbol[:frequencies,:percentages]))
    filter!(row->row.Variables==var,var1)
    v1=DataFrameGroup(var1,grouping_var)

    v2=select(v1[1],Not(grouping_var))
    for i=2:length(v1)
        v3=select(v1[i],Not(grouping_var))
        v2=outerjoin(v2,v3,on=Symbol[:Variables,:categories],makeunique=true)
    end

    gv2=DataFrameGroup(v2,:Variables)
    v2=@pipe RearrangeRows.(gv2,:categories) |> vcat(_...)
    ColumnNames=@pipe df[:,grouping_var] |> unique(_) |> Symbol.(_)
    rename!(v2,[:Variables;:categories;ColumnNames])
    v2.Variables[2:end] .= Ref("")
    return v2
end

vstring(x::Vector)=string.(x)

# The following function only work on data frames directly generated by GroupedContinuousStats.jl and GroupedCategoricalStats.jl,
# not work on data frames read from current Working directory.
# For input parameter vars1, continuous variables should be input as Symbols, categorical variables should be input as Strings.
function GenerateTFL_Table(df_con::DataFrame,df_cate::DataFrame,vars1::Vector,cate_grouping_var::Symbol)
    tfl1=DataFrame()
    for i=vars1
        if typeof(i)==Symbol
            var1=ConVarExtract2(df_con,i)
            var1=mapcols(vstring,var1)
        else
            var1=CateVarExtract2(df_cate,i,cate_grouping_var)
            var1=mapcols(vstring,var1)
        end
        append!(tfl1,var1)
        missing_row=repeat(["",],ncol(tfl1))
        push!(tfl1,missing_row)
    end
    m1=Matrix{Union{String,Int64}}(tfl1)
    recode!(m1,"missing"=>"NA")
    tfl1=DataFrame(m1,propertynames(tfl1))
    return tfl1
end
